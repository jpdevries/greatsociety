package com.gs.data {	/**	 * Copyright (c) 2011 JP DeVries, Nemo Design	 * 	 * Permission is hereby granted, free of charge, to any person	 * obtaining a copy of this software and associated documentation	 * files (the "Software"), to deal in the Software without	 * restriction, including without limitation the rights to use,	 * copy, modify, merge, publish, distribute, sublicense, and/or sell	 * copies of the Software, and to permit persons to whom the	 * Software is furnished to do so, subject to the following	 * conditions:	 * 	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.	 * 	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES	 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT	 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,	 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR	 * OTHER DEALINGS IN THE SOFTWARE.	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 10.0	 *	@author JP DeVries	 *	@since 05/29/11	 *	@description  	 */	import flash.events.*;	// 2nd Party Imports	import com.trycatch.data.*;	import com.trycatch.utils.*;	/**   */	public class XMLParser extends EventDispatcher {		/** The class name */		public static const CLASSNAME:String = "XMLParser";		/** If false this class will suspend trace statements */		public static var doTrace:Boolean = false;		/** The full classPath */		public static function get classPath() : String {			return "com.gs.data" + CLASSNAME;		}				public static const XML_PARSED:String = "xml_parsed";				protected var _pages:Vector.<PageDTO> = new Vector.<PageDTO>();				protected var _mainXML:XML;		public function get mainXML() : XML { 			return _mainXML; 		}		public function set mainXML( arg:XML ) : void { 			_mainXML = arg; 			_parseXML();		}				private var _comradeLinks:Vector.<AnchorDTO> = new Vector.<AnchorDTO>();				public function get comradeLinks() : Vector.<AnchorDTO> {			return _comradeLinks;		}				private var _socialLinks:Vector.<AnchorDTO> = new Vector.<AnchorDTO>();				public function get socialLinks() : Vector.<AnchorDTO> {			return _socialLinks;		}				protected var _productDTOs:Vector.<ProductDTO> = new Vector.<ProductDTO>();				public function get productDTOs() : Vector.<ProductDTO> {			return _productDTOs;		}				private var _employees:Vector.<EmployeeDTO> = new Vector.<EmployeeDTO>();				public function get employees() : Vector.<EmployeeDTO> {			return _employees;		}				private var _speaksOutLink:String = "";		public function get speaksOutLink() : String { 			return _speaksOutLink; 		}				protected var _curPageDTO:PageDTO;		public function get curPageDTO() : PageDTO { 			return _curPageDTO; 		}				protected var _autoPlayMusic:Boolean = true;		public function get autoPlayMusic() : Boolean { 			return _autoPlayMusic; 		}				private var _musicVol:Number = 1;		public function get musicVol() : Number { 			return _musicVol; 		}		public function set musicVol( arg:Number ) : void { 			_musicVol = arg; 		}				private var _workHREF:String = 'http://greatsociety.com/work';		public function get workHREF() : String { 			return _workHREF; 		}		public function set workHREF( arg:String ) : void { 			_workHREF = arg; 		}				/** XMLParser constructor */		public function XMLParser() : void {			super();			//if(doTrace) DebugUtils.log("XMLParser instantiated");		}				private function _parseXML() : void {						_autoPlayMusic = (_mainXML.@autoPlayMusic.toString().toLowerCase() == 'true') ? true : false;			_musicVol = (_mainXML.@musicVol.toString().length) ? Number(_mainXML.@musicVol) : 1;			trace("_mainXML.@workHREF.toString(): " + _mainXML.@workHREF.toString());			if(_mainXML.@workHREF.toString().length) _workHREF = _mainXML.@workHREF.toString();			trace("_musicVol: " + _musicVol);						for each(var _page:XML in _mainXML.page) {				var _id:String = _page.@id;								var _pageDTO:PageDTO = new PageDTO(_id, _page.@className, (_page.@audio.toString().toLowerCase() == "true") ? true : false, _page.@href);				_pages.push(_pageDTO);								switch(_id) {					case 'doctrine':					_parseDoctrine(_page);					break;										case 'swag':					_parseSwag(_page);					break;										case 'speaks-out':					//_speaksOutLink = _page.@href;					_parseLinks(_socialLinks,_page);					break;										case 'comrades':					_parseLinks(_comradeLinks,_page);					break;										case 'meet-gs':					_parseMeetGS(_page);					break;										case 'fruits-of-our-labours':										break;										case 'contact':										break;										case 'four-legged-friends':										break;				}			}						dispatchEvent(new Event(XML_PARSED));		}				private function _parseDoctrine(_xml:XML) : void {					}				private function _parseSwag(_xml:XML) : void {			for each(var _item:XML in _xml.items.item) {				//trace("_item: " + _item);				var _swagItemDTO:ProductDTO = new ProductDTO(_item);				_productDTOs.push(_swagItemDTO);			}		}				private function _parseComrades(_xml:XML) : void {			_parseLinks(_comradeLinks,_xml);		}				private function _parseLinks(_links:Vector.<AnchorDTO>,_xml:XML) : void {			for each(var _link:XML in _xml.links.link) {				var _bm:AnchorDTO = new AnchorDTO(_link.@title, _link.@href);				_links.push(_bm);			}		}				private function _parseMeetGS(_xml:XML) : void {			for each(var _employeeX:XML in _xml.employees.employee) {				var _employee:EmployeeDTO = new EmployeeDTO(_employeeX);				_employees.push(_employee);			}		}			}}