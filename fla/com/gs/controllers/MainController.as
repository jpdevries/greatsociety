package com.gs.controllers {	/**	 * Copyright (c) 2011 JP DeVries, Nemo Design	 * 	 * Permission is hereby granted, free of charge, to any person	 * obtaining a copy of this software and associated documentation	 * files (the "Software"), to deal in the Software without	 * restriction, including without limitation the rights to use,	 * copy, modify, merge, publish, distribute, sublicense, and/or sell	 * copies of the Software, and to permit persons to whom the	 * Software is furnished to do so, subject to the following	 * conditions:	 * 	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.	 * 	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES	 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT	 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,	 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR	 * OTHER DEALINGS IN THE SOFTWARE.	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 10.0	 *	@author JP DeVries	 *	@since 05/19/11	 *	@description  	 */	// Native Imports	import flash.display.*;	import flash.events.*;	import flash.media.*;	import flash.net.*;	import flash.system.*;	import flash.external.*;		import com.gs.components.*;	import com.gs.data.*;	import com.gs.events.*;	import com.gs.view.*;		import com.greensock.*;	import com.greensock.easing.*;	// 2nd Party Imports	import com.trycatch.display.*;	import com.trycatch.geom.*;	import com.trycatch.media.*;	import com.trycatch.utils.*;		import com.bumpslide.util.*;		import com.massiveProCreation.flipbook.IMainAS;		/**   */	public class MainController extends AudioClip implements IMainController {		/** The name of the class */		public static const CLASSNAME:String = "MainController";		/** If false this class will suspend trace statements */		public static var doTrace:Boolean = true;		/** The full classPath */		public static function get classPath() : String {			return "com.gs.controllers" + CLASSNAME;		}				/**  */		public var triggerClip:TriggerClip;				/**  */		public var dogClip:DogClip;						/**  */		public var plate:Sprite;				/**  */		public var backgroundClip:Sprite;				/**  */		public var dogs:Sprite;				/**  */		public var store:Sprite;				/**  */		public var book:Sprite;				/**  */		public var passport:Sprite;				/**  */		public var board:Sprite;				/**  */		public var projectorClip:ProjectorClip;				/**  */		public var contactShade:Sprite;				/**  */		public var chef:Sprite;				/**  */		public var comradesClip:ComradesClip;				private var _model:DataModel = DataModel.getInstance();				private var _manifestoHolder:Sprite = new Sprite();				private var _backBtn:BackBtn;				private var _bgSound:Song;				private var _manifestoLoader:Loader;				/**  */		public var posterClip:PosterClip;				/**  */		public var shopClip:ShopClip;				private var _swfFolder:String = '';		public function get swfFolder() : String { 			return _swfFolder; 		}		public function set swfFolder( arg:String ) : void { 			_swfFolder = _model.swfFolder = arg; 		}				/**  */		public var socialBook:SocialBook;		/** MainController constructor */		public function MainController() : void {			super();			//if(doTrace) DebugUtils.log("MainController instantiated");								Security.loadPolicyFile('http://greatsociety.s3.amazonaws.com/crossdomain.xml');			Security.allowDomain('http://greatsociety.com');			Security.allowDomain('http://c0654.paas1.tx.modxcloud.com');
			Security.allowDomain('http://c0650.paas2.tx.modxcloud.com');			Security.allowDomain('http://tgs.greatsociety.modxcloud.com');
			Security.allowDomain('http://greatsociety.s3.amazonaws.com');						addEventListener(Event.ADDED_TO_STAGE, _handleAddedToStage);		}				private function _handleAddedToStage(e:Event) : void {			removeEventListener(Event.ADDED_TO_STAGE, _handleAddedToStage);			DOUtils.disableClipCursor(projectorClip);						comradesClip.visible = false;			comradesClip.addEventListener(ComradesClip.CLOSE, _handleComradesClipClose);			comradesClip.addEventListener(ComradesClip.OUTRO_COMPLETE, _handleComradesClipOutroComplete);						dogClip.addEventListener(DogClip.OUTRO_COMPLETE, _handleDogOutroComplete);			socialBook.addEventListener(SocialBook.OUTRO_COMPLETE, _handleSocialBookOutroComplete);					triggerClip.addEventListener(TriggerEvent.TRIGGER_OVER, _handleTriggerOver);			triggerClip.addEventListener(TriggerEvent.TRIGGER_OUT, _handleTriggerOut);			triggerClip.addEventListener(TriggerEvent.TRIGGER_UP, _handleTriggerUp);				_model.addEventListener(DataModel.STAGE_CHANGED, _handleStateChanged);			swfFolder = swfFolder;			addChild(_manifestoHolder);					posterClip.addEventListener(Event.CLOSE, _handlePosterClose);			posterClip.addEventListener(ReverseClip.REVERSED, _handlePosterReversed);					}				private function _handleDogOutroComplete(e:Event) : void {			triggerClip.enabled = true;		}				private function _handleSocialBookOutroComplete(e:Event) : void {			triggerClip.enabled = true;		}				/**		* 		* @param			*/		public function setXML(_xml:XML) : void {			//if(doTrace) DebugUtils.log("loadXML called >> " + classPath);			_model.addEventListener(XMLParser.XML_PARSED, _handleXMLParsed);			_model.mainXML = _xml;		}				private function _handleComradesClipOutroComplete(e:Event) : void {			triggerClip.enabled = true;		}				private function _handleStateChanged(e:Event) : void {			trace("_handleStateChanged:: " + _model.curState);		}				private function _handlePosterClose(e:Event) : void {			//posterClip.reverse();			posterClip.gotoAndPlay(32);						posterClip.hideBackButton();		}				private function _handlePosterReversed(e:Event) : void {			trace('_handlePosterReversed');			TweenLite.to(posterClip,0.4,{y:stage.stageHeight + 40,ease:'Quad.easeOut',onComplete:function(){				posterClip.reset();				triggerClip.enabled = true;			}});		}				private function _handleXMLParsed(e:Event) : void {			//_bgSound = new Sound(new URLRequest('mp3/russian_loop.mp3'));			//_playSound(_bgSound, _bgSoundChannel);						_bgSound = new Song('assets/mp3/russian_loop.mp3',true,_model.autoPlayMusic,true, _model.musicVol);		}						private function _handleComradesClipClose(e:Event) : void {			comradesClip.doOutro();					}						private function showComradesNotePad() : void {			comradesClip.doIntro();		}				private function _handleTriggerOver(e:TriggerEvent) : void {			var _curTrigger:Trigger = e.clickedTrigger as Trigger;			trace("_handleTriggerOver:: " + _curTrigger.name);						switch(_curTrigger) {				case triggerClip.policeTrigger:				projectorClip.open();				break;								default:				break;			}		}				private function _handleTriggerOut(e:TriggerEvent) : void {			var _curTrigger:Trigger = e.clickedTrigger as Trigger;			//trace("_handleTriggerOut:: " + _curTrigger.name);						switch(_curTrigger) {				case triggerClip.policeTrigger:				projectorClip.close();				break;								default:				break;			}		}				public function playMusic() : void {			_playMusic();		}				private function _pauseMusic() : void {			trace("_pauseMusic");			TweenLite.to(_bgSound,1,{volume:0,ease:'Quad.easeIn',onComplete:function(){ _bgSound.pause() }});		}				private function _playMusic() : void {			TweenLite.to(_bgSound,1,{volume:1,ease:'Quad.easeOut',onStart:function(){ _bgSound.play() }});		}				private function _handleTriggerUp(e:TriggerEvent) : void {			var _curTrigger:Trigger = e.clickedTrigger as Trigger;			_model.curState = _curTrigger.triggerId;			var _curPageDTO:PageDTO = _model.curPageDTO || null;			if(_curPageDTO && _curPageDTO.audio) _pauseMusic();			switch(_curTrigger) {				case triggerClip.policeTrigger:				//projectorClip.open();				ExternalInterface.call("jsb_reel_video_modal");				_pauseMusic();				break;								case triggerClip.dmcTrigger:				showComradesNotePad();				triggerClip.enabled = false;				break;								case triggerClip.schoolBoyTrigger:				// load the manifesto book				_manifestoLoader = new Loader();				_manifestoLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, _handleManifestoComplete);				//_manifestoLoader.load(new URLRequest(_model.swfFolder + 'preview.swf?nocache=' + new Date().time));				//trace(_model.swfFolder + 'preview.swf?nocache=');												_manifestoLoader.load(new URLRequest(_model.swfFolder + 'preview.swf'));				triggerClip.enabled = false;				break;								case triggerClip.snackGirl:				//trace("snackGirl");				shopClip.doIntro();				break;								case triggerClip.chefTrigger:				//navigateToURL(new URLRequest(_curPageDTO.href), '_blank');				socialBook.doIntro();				triggerClip.enabled = false;				break;								case triggerClip.illustrationTrigger:				navigateToURL(new URLRequest(_curPageDTO.href), '_blank');				break;								case triggerClip.puppyTrigger:				dogClip.doIntro();				triggerClip.enabled = false;				break;								case triggerClip.astroTrigger:				navigateToURL(new URLRequest(_model.workHREF), '_self');				break;								case triggerClip.megaphoneGirl:				trace('bring in poster');				posterClip.play();				TweenLite.to(posterClip,0.6,{x:510,ease:'Quad.easeOut',onComplete:function(){										triggerClip.enabled = false;				}});				break;								default:				break;			}					}				private function _handleManifestoComplete(e:Event) : void {			trace('_handleManifestoComplete');			//var _manifestoLoader:Loader = e.currentTarget.content as Loader; 		// the now loaded external swf			_manifestoLoader.removeEventListener(Event.COMPLETE, _handleManifestoComplete);						_playSound(new CrowdCheer());			Delegate.callLater(350,function(){				_playSound(new BookDrop());			});						// positioning relative to center to make scaling easy			//_manifestoHolder.x = stage.stageWidth / 2;			//_manifestoHolder.y = stage.stageHeight / 2;			//_manifestoLoader.x = -_manifestoHolder.x;			//_manifestoLoader.y = -_manifestoHolder.y - 30;						_manifestoLoader.x = -120;			_manifestoLoader.y = -150;			// initially upscalled			_manifestoHolder.scaleX = _manifestoHolder.scaleY = 1.2;			// create a back button			_backBtn = new BackBtn();			_backBtn.x = 220 + 450;			_backBtn.y = 235 + 350;			_backBtn.visible = false;						// add button and book			//_manifestoHolder.mouseEnabled = false;			_manifestoHolder.addChild(_backBtn);			_manifestoHolder.addChild(_manifestoLoader);						var _backHit:RectSprite = new RectSprite(318 + 450, 290 + 324, _backBtn.width, _backBtn.height);			_backHit.alpha = 0;			_manifestoHolder.addChild(_backHit);						// book intro			TweenLite.to(_manifestoHolder, .2, {alpha:1, delay:0, ease:'Quad.easeOut',onComplete:function(){				//IMainAS(_manifestoLoader.content).gotoPage(2);				//_manifestoHolder.mouseEnabled = true;			}});						_manifestoHolder.x = _manifestoHolder.y = -60;						TweenLite.to(_manifestoHolder, .4, {scaleX:1,x:0,y:0, delay:0.075, overwrite:false, scaleY:1, ease:'Quad.easeOut'});			TweenLite.to(_backBtn, 1.4, {x:318 + 450, y:290 + 326, rotation:-6, delay:1.6, ease:'Quad.easeOut', onStart:function(){ _backBtn.visible = true; }, onComplete:function(){				DOUtils.enableClipCursor(_backHit);				_backHit.addEventListener(MouseEvent.MOUSE_UP, _handleManifestoClose);							}});		}				private function _handleManifestoClose(e:Event) : void {			// garbage collection			//var _backBtn:BackBtn = e.currentTarget as BackBtn;			_backBtn.removeEventListener(MouseEvent.MOUSE_UP, _handleManifestoClose);			_playSound(new SheetMove());			// book outro			TweenLite.to(_backBtn, .5, {x:220 + 450, y:235 + 350, rotation:0, delay:0, ease:'Quad.easeOut'});			TweenLite.to(_manifestoHolder, 0.8, {rotation:24, delay:.4, ease:'Quad.easeOut'});			TweenLite.to(_manifestoHolder, 0.9, {x:-stage.stageWidth, delay:.7, ease:'Quad.easeIn', overwrite:false, onComplete:function(){				// garbage collection				DOUtils.clearDisplayList(_manifestoHolder);				_manifestoHolder.x = _manifestoHolder.y = _manifestoHolder.rotation = 0;								triggerClip.enabled = true;									try					{						_manifestoLoader.unload();						_manifestoLoader = null;					} 					catch (e:Error)					{						trace('coudlnt ulnoad');					}							}});		}	}}