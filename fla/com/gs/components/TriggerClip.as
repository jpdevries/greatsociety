package com.gs.components {	/**	 * Copyright (c) 2011 JP DeVries, Nemo Design	 * 	 * Permission is hereby granted, free of charge, to any person	 * obtaining a copy of this software and associated documentation	 * files (the "Software"), to deal in the Software without	 * restriction, including without limitation the rights to use,	 * copy, modify, merge, publish, distribute, sublicense, and/or sell	 * copies of the Software, and to permit persons to whom the	 * Software is furnished to do so, subject to the following	 * conditions:	 * 	 * The above copyright notice and this permission notice shall be	 * included in all copies or substantial portions of the Software.	 * 	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES	 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT	 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,	 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR	 * OTHER DEALINGS IN THE SOFTWARE.	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 10.0	 *	@author JP DeVries	 *	@since 05/19/11	 *	@description  	 */	// Native Imports	import flash.display.*;	import flash.events.*;		import com.gs.events.*;	// 2nd Party Imports	import com.trycatch.display.*;	import com.trycatch.geom.*;	import com.trycatch.utils.*;	/**   */	public class TriggerClip extends Sprite {		/** The name of the class */		public static const CLASSNAME:String = "TriggerClip";		/** If false this class will suspend trace statements */		public static var doTrace:Boolean = true;		/** The full classPath */		public static function get classPath() : String {			return "com.gs.components" + CLASSNAME;		}				/**  */		public var illustrationTrigger:Trigger;						/**  */		public var waldoTrigger:Trigger;				/**  */		public var puppyManTrigger:Trigger;				/**  */		public var blimpTrigger:Trigger;				/**  */		public var megaphoneGirl:Trigger;				/**  */		public var puppyTrigger:Trigger;				/**  */		public var policeTrigger:Trigger;				/**  */		public var snackGirl:Trigger;				/**  */		public var astroTrigger:Trigger;				/**  */		public var schoolBoyTrigger:Trigger;				/**  */		public var mariachiTrigger:Trigger;				/**  */		public var chefTrigger:Trigger;				/**  */		public var dmcTrigger:Trigger;				private var _triggers:Vector.<Trigger> = new Vector.<Trigger>();				private var _scrim:RectSprite;						public static const HOME:String = "home";		public static const DOCTRINE:String = "doctrine";		public static const MARIACHI:String = "mariachi";		public static const SWAG:String = "swag";		public static const COMRADES:String = "comrades";		public static const SPEAKS_OUT:String = "speaks-out";		public static const MEET_US:String = "meet_us";		public static const FRUITS_OF_OUR_LABORS:String = "fruits_of-our-labors";		public static const CONTACT:String = "contact";		public static const DOG_FRIEND:String = "dog-friend";		public static const ILLUSTRATION:String = "illustration";								public function get enabled() : Boolean {			return !_scrim.visible;		}						public function set enabled(arg:Boolean) : void {			_scrim.visible = !arg;		}						/** TriggerClip constructor */		public function TriggerClip() : void {			super();			if(doTrace) DebugUtils.log("TriggerClip instantiated");						addEventListener(Event.ADDED_TO_STAGE, _handleAddedToStage);		}				private function _handleAddedToStage(e:Event) : void {			removeEventListener(Event.ADDED_TO_STAGE, _handleAddedToStage);			removeChild(waldoTrigger);						mariachiTrigger.loops = 100;						megaphoneGirl.reverseOnOut = true;			megaphoneGirl.reverseStartFrame = 6;			schoolBoyTrigger.OverSound = snackGirl.OverSound = dmcTrigger.OverSound = chefTrigger.OverSound = astroTrigger.OverSound = illustrationTrigger.OverSound = TriggerPop;						mariachiTrigger.OverSound = MariachiSound;			megaphoneGirl.OverSound = MegaphoneSound;			puppyTrigger.OverSound = BarkSound;			puppyManTrigger.OverSound = JBJSound;						mariachiTrigger.trackAudio = puppyManTrigger.trackAudio = true;						schoolBoyTrigger.triggerId = DOCTRINE;			mariachiTrigger.triggerId = MARIACHI;			snackGirl.triggerId = SWAG;			dmcTrigger.triggerId = COMRADES;			chefTrigger.triggerId = SPEAKS_OUT;			astroTrigger.triggerId = MEET_US;			policeTrigger.triggerId = FRUITS_OF_OUR_LABORS;			megaphoneGirl.triggerId = CONTACT;			puppyTrigger.triggerId = DOG_FRIEND;			illustrationTrigger.triggerId = ILLUSTRATION;			_triggers.push(waldoTrigger, puppyManTrigger, blimpTrigger, megaphoneGirl, puppyTrigger, policeTrigger, snackGirl, astroTrigger, schoolBoyTrigger, mariachiTrigger, chefTrigger, dmcTrigger, illustrationTrigger);						_addListeners();						_scrim = new RectSprite(-x,-y,stage.stageWidth,stage.stageHeight);			_scrim.alpha = 0;			enabled = true;			addChild(_scrim);		}				private function _addListeners() : void {			var l:int = _triggers.length;			for (var i:int = 0; i < l; i++) {				var _curTrigger:Trigger = _triggers[i];				DOUtils.enableClipCursor(_curTrigger);				_curTrigger.addEventListener(MouseEvent.MOUSE_UP, _handleTriggerUp);				_curTrigger.addEventListener(MouseEvent.MOUSE_OVER, _handleTriggerOver);				_curTrigger.addEventListener(MouseEvent.MOUSE_OUT, _handleTriggerOut);			}		}				private function _handleTriggerOver(e:Event) : void {			var _clickedTrigger:Trigger = e.currentTarget as Trigger;			//trace("trigger clicked:: " + _clickedTrigger.name);			_processTriggerAction(TriggerEvent.TRIGGER_OVER, _clickedTrigger);		}				private function _handleTriggerOut(e:Event) : void {			var _clickedTrigger:Trigger = e.currentTarget as Trigger;			//trace("trigger clicked:: " + _clickedTrigger.name);			_processTriggerAction(TriggerEvent.TRIGGER_OUT, _clickedTrigger);		}				private function _handleTriggerUp(e:Event) : void {			var _clickedTrigger:Trigger = e.currentTarget as Trigger;			//trace("trigger clicked:: " + _clickedTrigger.name);			_processTriggerAction(TriggerEvent.TRIGGER_UP, _clickedTrigger);		}				private function _processTriggerAction(_mouseAction:String, _clickedTrigger:Trigger) : Boolean {						/*switch(_clickedTrigger) {				case puppyManTrigger:				trace("");				break;				case blimpTrigger:				trace("");				break;				case megaphoneGirl:				trace(CONTACT);				_id = CONTACT;				break;				case puppyTrigger:				trace(DOG_FRIEND);				_id = DOG_FRIEND;				break;				case policeTrigger:				trace(FRUITS_OF_OUR_LABORS);				_id = FRUITS_OF_OUR_LABORS;				break;				case snackGirl:				trace(SWAG);				_id = SWAG;				break;				case astroTrigger:				trace(MEET_US);				_id = MEET_US;				break;				case schoolBoyTrigger:				trace(DOCTRINE);				_id = DOCTRINE;				break;				case mariachiTrigger:				trace("");				_id = CONTACT;				break;				case chefTrigger:				trace(SPEAKS_OUT);				_id = SPEAKS_OUT;				break;				case dmcTrigger:				trace(COMRADES);				_id = COMRADES;				break;			}*/						if(!_clickedTrigger) return false;			dispatchEvent(new TriggerEvent(_mouseAction, _clickedTrigger));			return true;		}				/**		* Clears the DisplayList		* @return Whether or not any children were removed when cleared, If _displayList.numChildren &lt; 1, false is returned.		* @see <a href="http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/DisplayObject.html" target="_blank" alt="DisplayObject">DisplayObject</a>		*/		public function clearDisplayList() : Boolean {			return DOUtils.clearDisplayList(this);		}		/**		* Handles garbage collection		*/		public function destroy() : void {			clearDisplayList();		}			}}